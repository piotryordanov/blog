<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Piotr Yordanov</title>
    <link>https://blog.piotryordanov.com/posts/</link>
    <description>Recent content in Posts on Piotr Yordanov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.piotryordanov.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript&#39;s super cool console.table</title>
      <link>https://blog.piotryordanov.com/posts/javascripts-super-cool-console.table/</link>
      <pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.piotryordanov.com/posts/javascripts-super-cool-console.table/</guid>
      <description>Did you ever try running console.table instead of console.log
This was before
And this is after </description>
    </item>
    
    <item>
      <title>Using ramda to fill react components</title>
      <link>https://blog.piotryordanov.com/posts/using-ramda-to-fill-react-components/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.piotryordanov.com/posts/using-ramda-to-fill-react-components/</guid>
      <description>Ramda is swiss toolbox of javascript functional programming. I have decided to use it in order to greatly simplify the way I am managing data processing.
As I was building Zeistab, I came across two challenges. The first was related to fetching data asynchronisally, while needing to wait for all to be fetched. I discussed it in detail in my post on using Ramda Map with async calls</description>
    </item>
    
    <item>
      <title>Using Ramda Map with async calls</title>
      <link>https://blog.piotryordanov.com/posts/using-ramda-map-with-async-calls/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.piotryordanov.com/posts/using-ramda-map-with-async-calls/</guid>
      <description>By far, the hardest Ramda challenge I faced while building Zeistab was running a R.map on a bunch of async functions, and then waiting for the result of all the async functions before proceeding. Normally, Promise.All does the job, but the question was to figure out how to integrate that with ramda.</description>
    </item>
    
  </channel>
</rss>
